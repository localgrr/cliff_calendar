(function ($) {

    class DateFn {

        static make_datetime_obj = (_date_obj, _time_obj) => {

            if(!is_valid_date_obj(_date_obj) || !is_valid_date_obj(_time_obj)) return null;

            let datetime = new Date(_date_obj.getFullYear(), _date_obj.getMonth(), _date_obj.getDate(), _time_obj.getHours(), _time_obj.getMinutes());

            //adjust for timezone
            datetime.setHours(datetime.getHours() + (datetime.getTimezoneOffset() / 60));

            return datetime;

        }

        static is_valid_date_obj = _obj => _obj && Object.prototype.toString.call(_obj) === "[object Date]" && !isNaN(_obj);

        static is_valid_ts = _ts => {

            let newTimestamp = new Date(_ts).getTime();
            return this.is_numeric(newTimestamp);

        }

        static is_numeric = _num => !isNaN(parseFloat(_num)) && isFinite(_num);
    }

    class CliffEvent {

        constructor() {

            const jq = {

                start_date : $("#cliff_start_date"),
                start_time : $("#cliff_start_time"),
                end_date : $("#cliff_end_date"),
                end_time : $("#cliff_end_time"),
                duration : $("#cliff_duration"),
                all_day : $("#cliff_all_day")

            }

            const el = {

                start_date : jq.start_date[0],
                end_date : jq.end_date[0],
                end_time : jq.end_time[0],
                start_time : jq.start_time[0],
                duration : jq.duration[0],
                all_day : jq.all_day[0]

            }

            const start_date_obj = DateFn.is_valid_date_obj(el.start_date.valueAsDate) ? el.start_date.valueAsDate : null;
            const start_date_ts = DateFn.is_valid_ts(el.start_date.valueAsNumber) ? el.start_date.valueAsNumber : null;
            const start_time_obj = DateFn.is_valid_date_obj(el.start_time.valueAsDate) ? el.start_time.valueAsDate : null;
            const start_time_ts = DateFn.is_valid_ts(el.start_time.valueAsNumber) ? el.start_time.valueAsNumber : null;
            const end_date_obj = DateFn.is_valid_date_obj(el.end_date.valueAsDate) ? el.end_date.valueAsDate : null;
            const end_date_ts = DateFn.is_valid_ts(el.end_date.valueAsNumber) ? el.end_date.valueAsNumber : null;
            const end_time_obj = DateFn.is_valid_date_obj(el.end_time.valueAsDate) ? el.end_time.valueAsDate : null;
            const end_time_ts = DateFn.is_valid_ts(el.end_time.valueAsNumber) ? el.end_time.valueAsNumber : null;

            this.start = {
                'date' : {
                    'obj' : start_date_obj,
                    'ts' : start_date_ts
                }, 
                'time' : {
                    'obj' : start_time_obj,
                    'ts' : start_time_ts,
                    'h' : start_time_obj ? start_date_obj.getHours() : null,
                    'm' : start_time_obj ? start_date_obj.getMinutes() : null,
                },
                'datetime' : {}
            };

            this.start.datetime.obj = DateFn.make_datetime_obj(this.start.date.obj, this.start.time.obj);
            this.start.datetime.ts = (this.start.datetime.obj) ? this.start.datetime.obj.getTime() : null;

            this.end = {
                'date' : {
                    'obj' : end_date_obj,
                    'ts' : end_date_ts
                }, 
                'time' : {
                    'obj' : end_time_obj,
                    'ts' : end_time_ts,
                    'h' : end_time_obj ? end_date_obj.getHours() : null,
                    'm' : end_time_obj ? end_date_obj.getMinutes() : null,
                },
                'datetime' : {}
            };

            this.end.datetime.obj = DateFn.make_datetime_obj(this.end.date.obj, this.end.time.obj);
            this.end.datetime.ts = (this.end.datetime.obj) ? this.end.datetime.obj.getTime() : null;

        }

    }

    var event1 = new CliffEvent();

    console.log("es6", event1);

$(document).ready(function() {

    check_all_day($("#cliff_all_day"));
    check_date_and_time();

    $("#cliff_all_day").change(function() {

        check_all_day($(this));

    });

    $("#cliff_start_date, #cliff_end_date, #cliff_start_time, #cliff_end_time").change(function() {

        check_date_and_time();

    });

    $("#cliff_duration").change(function() {

        check_duration_input();

    });

});

function equalize_start_and_end_dates(time_json) {

    document.querySelector("#cliff_end_date").valueAsNumber = time_json.start.date.ts;

    time_json.end.date.ts = time_json.start.date.ts;
    time_json.end.date.obj = time_json.start.date.obj;

    if(time_json.start.datetime.obj && time_json.end.datetime.obj) {

         document.querySelector("#cliff_end_time").valueAsNumber = time_json.start.time.ts;

         time_json.end.time.ts = time_json.start.time.ts;
         time_json.end.time.date = time_json.start.time.date;
         time_json.end.datetime.ts = time_json.start.datetime.ts;
         time_json.end.datetime.date = time_json.start.datetime.date;

    }

    return time_json;
}

function check_date_and_time() {

    var time_json = get_time_fields_json();

    //make sure end date is not before start date
    if(isNaN(time_json.end.date.ts) || (time_json.end.date.ts < time_json.start.date.ts)) {

        time_json = equalize_start_and_end_dates(time_json);

    }

    //Make sure end datetime is not before start datetime
    if(time_json.start.datetime.obj && time_json.end.datetime.obj) {

        if(!isNaN(time_json.end.date.ts) && (time_json.end.time.ts < time_json.start.time.ts)) {

            //check end time isn't before start time and if it is reset it
            time_json = equalize_start_and_end_dates(time_json);

        }

        time_json = update_duration_field(time_json);

    }

}

function update_duration_field(time_json) {

        var diff_obj = get_diff_obj(time_json.start.datetime.ts, time_json.end.datetime.ts);
        set_duration_field_value(diff_obj);

}

function get_diff_obj(start_datetime_ts, end_datetime_ts) {

    var diff = end_datetime_ts - start_datetime_ts; //this gives us ms
    return ms_to_time_obj(diff);

}

function set_duration_field_value(diff_obj) {

    if(!diff_obj) return false;

    $("#cliff_duration")
        .val(diff_obj ? diff_obj.string : null)
        .attr({
            'hours' : diff_obj.h,
            'minutes' : diff_obj.m
        });

    validate_duration_field(diff_obj);

}

function validate_duration_field(duration) {

    if(duration.h > 10) {

        $(".duration-warning").removeClass("d-none");

    } else {

        $(".duration-warning").addClass("d-none");

    }

    if((duration.h == 0) && (duration.m ==0)) {

        show_validation_error("#cliff_duration, #cliff_end_time", ".negative", ".format");

    } else {

        hide_validation_error("#cliff_duration, #cliff_end_time");

    }

}

function get_time_fields_json() {

    var time_json = {
        'start' : {
            'date' : {
                'obj' : is_valid_date_obj(document.querySelector("#cliff_start_date").valueAsDate) ? document.querySelector("#cliff_start_date").valueAsDate : null,
                'ts' : is_valid_ts(document.querySelector("#cliff_start_date").valueAsNumber) ? document.querySelector("#cliff_start_date").valueAsNumber : null
            }, 
            'time' : {
                'obj' : is_valid_date_obj(document.querySelector("#cliff_start_time").valueAsDate) ? document.querySelector("#cliff_start_time").valueAsDate : null,
                'ts' : is_valid_ts(document.querySelector("#cliff_start_time").valueAsNumber) ? document.querySelector("#cliff_start_time").valueAsNumber : null,
            },
            'datetime' : {}
        },
        'end' : {
            'date' : {
                'obj' : is_valid_date_obj(document.querySelector("#cliff_end_date").valueAsDate) ? document.querySelector("#cliff_end_date").valueAsDate : null,
                'ts' : is_valid_ts(document.querySelector("#cliff_end_date").valueAsNumber) ? document.querySelector("#cliff_end_date").valueAsNumber : null
            },
            'time' : {
                'obj' : is_valid_date_obj(document.querySelector("#cliff_end_time").valueAsDate) ? document.querySelector("#cliff_end_time").valueAsDate : null,
                'ts' : is_valid_ts(document.querySelector("#cliff_end_time").valueAsNumber) ? document.querySelector("#cliff_end_time").valueAsNumber : null
            },
            'datetime' : {}
        }
    };

    time_json.start.datetime.obj = make_datetime_obj(time_json.start.date.obj, time_json.start.time.obj);
    time_json.end.datetime.obj = make_datetime_obj(time_json.end.date.obj, time_json.end.time.obj);
    time_json.start.datetime.ts = (time_json.start.datetime.obj) ? time_json.start.datetime.obj.getTime() : null;
    time_json.end.datetime.ts = (time_json.end.datetime.obj) ? time_json.end.datetime.obj.getTime() : null;

    console.log(time_json);

    return time_json;
}

function ms_to_time_obj(s) {

    if(isNaN(s)) return null;

    var ms = s % 1000;
    s = (s - ms) / 1000;
    var secs = s % 60;
    s = (s - secs) / 60;
    var mins = s % 60;
    var hrs = (s - mins) / 60;

    var h = hrs.toString().padStart(2, '0');
    var m = mins.toString().padStart(2, '0');

    return {
        'string' : h + ':' + m,
        'h' : parseInt(h),
        'm' : parseInt(m)
    }
}

function is_valid_date_obj(date) {

    return date && Object.prototype.toString.call(date) === "[object Date]" && !isNaN(date);

}

function is_valid_ts(ts) {

    var newTimestamp = new Date(ts).getTime();
    return is_numeric(newTimestamp);

}

function is_numeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}


function make_datetime_obj(date_obj, time_obj) {

    if(!is_valid_date_obj(date_obj) || !is_valid_date_obj(time_obj)) return null;

    var datetime = new Date(date_obj.getFullYear(), date_obj.getMonth(), date_obj.getDate(), time_obj.getHours(), time_obj.getMinutes());

    //adjust for timezone
    datetime.setHours(datetime.getHours() + (datetime.getTimezoneOffset() / 60));

    return datetime;

}

function check_duration_input() {

    var time_json = get_time_fields_json();

    if(!time_json.start.datetime.obj && !time_json.end.datetime.obj) return false;

    var duration_field_arr = document.querySelector("#cliff_duration").value.split(":");

    var h = parseInt(duration_field_arr[0]);

    var m = duration_field_arr[1] ? parseInt(duration_field_arr[1]) : 0;

    if(isNaN(h) || isNaN(m)) {

        show_validation_error("#cliff_duration", ".format", ".negative");

        return false;

    }

    if( (h < 0) || (m < 0) ) {

        show_validation_error("#cliff_duration", ".negative", ".format");

        return false;

    } 

    hide_validation_error("#cliff_duration");

    set_duration_field_value({
        'string' : h + ":" + m,
        'hours' : h,
        'minutes' : m
    });

    set_datetime_by_duration(h, m);

    console.log(duration_field_arr);

}

function set_datetime_by_duration(h, m) {


}

function show_validation_error(input_selector, nested_selector_show = false, nested_selector_hide = false) {

    $(input_selector)
        .addClass("is-invalid")
        .next(".invalid-feedback").show();

    if(nested_selector_show) $(input_selector).next(".invalid-feedback").find(nested_selector_show).show();
    if(nested_selector_hide) $(input_selector).next(".invalid-feedback").find(nested_selector_hide).hide();
        
}

function hide_validation_error(input_selector) {

    $(input_selector)
        .removeClass("is-invalid")
        .next(".invalid-feedback").hide();  

}

function check_all_day(checkbox) {

    if(checkbox.is(":checked")) {

        $(".cliff-time").attr("disabled","disabled");

    } else {

        $(".cliff-time").removeAttr("disabled");


    }
}

})( jQuery );
